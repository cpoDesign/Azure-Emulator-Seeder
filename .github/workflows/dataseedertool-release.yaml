# GitHub Actions pipeline for DataSeederTool
# (Moved from DataSeederTool/ops/pipleine.yaml for automatic triggering)
# - Builds and publishes self-contained artefacts for Windows and Linux
# - Zips/tars artefacts per platform
# - Generates release notes from all commits since last tag
# - Semantic versioning, tags, and GitHub Releases
# - On main: creates full release, tags, uploads artefacts
# - On other branches: creates preview artefacts only (no release, no tag)

name: Build & Release DataSeederTool

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for tags and full history

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Ensure publish directory exists
        run: mkdir -p publish

      - name: Restore dependencies
        run: dotnet restore src/DataSeeder.sln

      - name: Build (Release)
        run: dotnet build src/DataSeeder.sln --configuration Release --no-restore

      - name: Run Unit Tests
        run: dotnet test src/DataSeeder.sln --configuration Release --no-build --verbosity normal

      - name: Publish Windows x64
        run: dotnet publish src/DataSeeder\DataSeeder.csproj --configuration Release --runtime win-x64 --self-contained true --output publish/win-x64

      - name: Publish Linux x64
        run: dotnet publish src/DataSeeder\DataSeeder.csproj --configuration Release --runtime linux-x64 --self-contained true --output publish/linux-x64

      - name: Archive Windows artefact
        run: |
          set -euo pipefail
          cd publish/win-x64
          zip -r ../DataSeederTool-win-x64.zip .
        shell: bash

      - name: Archive Linux artefact
        run: |
          set -euo pipefail
          cd publish/linux-x64
          tar -czf ../DataSeederTool-linux-x64.tar.gz .
        shell: bash

      - name: Get latest tag
        id: get_tag
        run: |
          set -euo pipefail
          echo "tag=$(git describe --tags --abbrev=0 || echo v0.0.0)" >> $GITHUB_OUTPUT

      - name: Get next version (semantic, auto-increment patch)
        id: next_version
        run: |
          set -euo pipefail
          last_tag=${{ steps.get_tag.outputs.tag }}
          if [[ "$last_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            patch=$((patch+1))
            echo "version=v$major.$minor.$patch" >> $GITHUB_OUTPUT
          else
            echo "version=v0.0.1" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes in publish/
        id: release_notes
        run: |
          set -euo pipefail
          last_tag=${{ steps.get_tag.outputs.tag }}
          if [ "$last_tag" = "v0.0.0" ]; then
            git log --pretty=format:"* %s (%h)" > publish/release-notes.md
          else
            git log $last_tag..HEAD --pretty=format:"* %s (%h)" > publish/release-notes.md
          fi
          if [ ! -s publish/release-notes.md ]; then
            echo "Initial release." > publish/release-notes.md
          fi

      - name: Show release notes in log
        run: |
          echo "--- Release Notes ---"
          cat publish/release-notes.md
          echo "---------------------"

      - name: Upload all artefacts (preview)
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: DataSeederTool-preview-all
          path: |
            publish/DataSeederTool-win-x64.zip
            publish/DataSeederTool-linux-x64.tar.gz
            publish/release-notes.md

      - name: Create Release & Upload Artefacts
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next_version.outputs.version }}
          name: DataSeederTool ${{ steps.next_version.outputs.version }}
          body_path: publish/release-notes.md
          files: |
            publish/DataSeederTool-win-x64.zip
            publish/DataSeederTool-linux-x64.tar.gz
            publish/release-notes.md

      - name: Tag commit with new version (after release)
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.next_version.outputs.version }}
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} ${{ steps.next_version.outputs.version }}
